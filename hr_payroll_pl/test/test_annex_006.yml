-
 Tworzę kalendarz pracownika na 4/5 etatu
-
 !record {model: calendar.calendar, id: calendar_45etat}:
    name: Kalendarz 4/5 etatu
-
 Generuję święta i czas pracy od 8 do 16 od poniedziałku do czwartku
-
 !python {model: calendar.calendar}: |
    calendar_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'hr_payroll_pl', 'calendar_45etat')[1]
    self.stworz_swieta(cr, uid, calendar_id, 2014, 2014, True, True, True, True, 8.0, 16.0)
    working_days_list = self.pool.get('calendar.event').search(cr, uid, [('calendar_id', '=', calendar_id), ('name', '>=', 'Godziny Pracy')])
    for day in working_days_list:
        self.pool.get('calendar.event').write(cr, uid, day, {'fr':False})
-
 Tworzę pracownika 
-
 !record {model: hr.employee, id: hr_pracownik_45etat1}:
    name: Jan6 Kowalski
    calendar_id: calendar_45etat
    department_id: dzial_annex
    birthday: 1985-01-01
-
 Tworzę etat (umowa o pracę), wynagrodzenie przed aneksem - 12 000 zł. Po aneksie - 10 000.
-
 !record {model: hr2.etat, id: hr_45etat1}:
    name: Jan6 Kowalski
    employee_id: hr_pracownik_45etat1
    sign_date: "2014-08-01"
    rozliczac_kwote_wolna: True
-
 Tworze dane etatu (część 1)
-
 !record {model: hr2.etat.data, id: hr_45etat1_data1}:
    name: Jan6 Kowalski
    etat_id: hr_45etat1
    date_from: "2014-08-01"
    month_pay: 12000
    calculate_fp: True
    calculate_fgsp: True
    calculate_emr: True
    calculate_rent: True
    calculate_chor: True
    calculate_wyp: True
-
 Tworze dane etatu (część 2)
-
 !record {model: hr2.etat.data, id: hr_45etat1_data2}:
    name: Jan6 Kowalski
    etat_id: hr_45etat1
    date_from: "2014-09-10"
    month_pay: 10000
    calculate_fp: True
    calculate_fgsp: True
    calculate_emr: True
    calculate_rent: True
    calculate_chor: True
    calculate_wyp: True
-
 Tworzę konfigurację listy płac
-
 !record {model: hr2.payslip.config,id: hr_45etat1_config}:
    name: Tylko etaty
    use_post_only: True
    sequence: 1
    department: [dzial_annex]
-
 Tworzę listę płac
-
 !record {model: hr2.payroll.register, id: hr_register_45etat1}:
    name: Payroll1
    register_month: 9
    register_year: 2014
    config: hr_45etat1_config
    date: "2014-10-01"
-
 Wyliczam listę płac
-
 !python {model: hr2.payroll.register}: |
    from datetime import datetime
    import time
    self.compute_additions(cr,uid,[ref("hr_register_45etat1")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_45etat1")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_45etat1")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_45etat1")],context=context)
-
 Sprawdzam poprawność wyliczeń
-
 !python {model: hr2.payslip}: |
    e = 0.00001
    employee_id = ref("hr_pracownik_45etat1")
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id)],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.skladka_zdrowotna_odliczona == 713.33, "Składka zdrowotna odliczona powinna wynosić 713,33, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert abs((payslip_obj.emr_pracownik + payslip_obj.rent_pracownik + payslip_obj.chor_pracownik) - 1462.40) < e, "Suma składek pracownika na ubezpieczenia emerytalne, rentowe i chorobowe powinna wynosić 1462.40, a wynosi %s" % (payslip_obj.emr_pracownik + payslip_obj.rent_pracownik + payslip_obj.chor_pracownik)
    assert payslip_obj.kwota_zaliczki_na_PIT == 1590.41, "Zaliczna na podatek dochodowy przed odliczeniem składki powinna wynosić 1590,41, a wynosi %s" % payslip_obj.kwota_zaliczki_na_PIT
    assert payslip_obj.koszty_uzyskania == 111.25, "Zaliczna na podatek dochodowy przed odliczeniem składki powinna wynosić 111,25, a wynosi %s" % payslip_obj.koszty_uzyskania
    assert payslip_obj.do_wyplaty == 7498.89, "Wypłata powinna wynosić 7498.89, a wynosi %s" % payslip_obj.do_wyplaty
    print "Test wykonany poprawnie. Życzymy powodzenia przy kolejnych testach."
    