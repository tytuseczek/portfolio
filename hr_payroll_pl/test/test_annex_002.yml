-
 Tworzę listę płac na październik
-
 !record {model: hr2.payroll.register, id: hr_register_choroba2}:
    name: Payroll1
    register_month: 10
    register_year: 2014
    config: hr_payroll_pl.hr_urlop_wypoczynkowy_config
    date: "2014-11-01"
-
 Wyliczam i zatwierdzam listę płac (październik)
-
 !python {model: hr2.payroll.register}: |
    from datetime import datetime
    import time
    self.compute_additions(cr,uid,[ref("hr_register_choroba2")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_choroba2")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_choroba2")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_choroba2")],context=context)
-
 Sprawdzam poprawność wyliczeń z września
-
 !python {model: hr2.payslip}: |
    e = 0.00001
    employee_id = ref("hr_payroll_pl.hr_pracownik_choroba1")
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id),('register_id.register_month','=',9), ('register_id.register_year','=',2014)],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.skladka_zdrowotna_odliczona == 786.45, "Składka zdrowotna odliczona powinna wynosić 786.45, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert abs((payslip_obj.emr_pracownik + payslip_obj.rent_pracownik + payslip_obj.chor_pracownik) - 1480.68) < e, "Suma składek pracownika na ubezpieczenia emerytalne, rentowe i chorobowe powinna wynosić 1480.68, a wynosi %s" % (payslip_obj.emr_pracownik + payslip_obj.rent_pracownik + payslip_obj.chor_pracownik)
    assert payslip_obj.do_wyplaty == 8260.41, "Wypłata powinna wynosić 8260.41, a wynosi %s" % payslip_obj.do_wyplaty
    assert payslip_obj.kwota_zaliczki_na_PIT == 1760.15, "Zaliczka na podatek dochodowy przed odliczeniem składki powinna wynosić 1760.15, a wynosi %s" % payslip_obj.kwota_zaliczki_na_PIT
    assert payslip_obj.koszty_uzyskania == 111.25, "Zaliczna na podatek dochodowy przed odliczeniem składki powinna wynosić 111,25, a wynosi %s" % payslip_obj.koszty_uzyskania
    print "Obliczenia z września prawidłowe"
-
 Sprawdzam poprawność wyliczeń z października
-
 !python {model: hr2.payslip}: |
    e = 0.00001
    employee_id = ref("hr_payroll_pl.hr_pracownik_choroba1")
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id),('register_id.register_month','=',10), ('register_id.register_year','=',2014)],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.skladka_zdrowotna_odliczona == 642.00, "Składka zdrowotna odliczona powinna wynosić 642.00, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert abs((payslip_obj.emr_pracownik + payslip_obj.rent_pracownik + payslip_obj.chor_pracownik) - 0.00) < e, "Suma składek pracownika na ubezpieczenia emerytalne, rentowe i chorobowe powinna wynosić 1121.73, a wynosi %s" % (payslip_obj.emr_pracownik + payslip_obj.rent_pracownik + payslip_obj.chor_pracownik)
    assert payslip_obj.kwota_zaliczki_na_PIT == 1424.81, "Zaliczna na podatek dochodowy przed odliczeniem składki powinna wynosić 1424,81, a wynosi %s" % payslip_obj.kwota_zaliczki_na_PIT
    assert payslip_obj.koszty_uzyskania == 111.25, "Zaliczna na podatek dochodowy przed odliczeniem składki powinna wynosić 111,25, a wynosi %s" % payslip_obj.koszty_uzyskania
    assert payslip_obj.do_wyplaty == 6755.29, "Wypłata powinna wynosić 6755,29, a wynosi %s" % payslip_obj.do_wyplaty
    print "Test wykonany poprawnie. Życzymy powodzenia przy kolejnych testach."
