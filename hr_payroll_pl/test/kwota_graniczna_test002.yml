-
 Tworzę pracownika
-
 !record {model: hr.employee, id: hr_pracownik_kgraniczna2}:
    name: Robert Robertowski
-
 Tworzę etat
-
 !record {model: hr2.etat, id: hr_etat_kgraniczna2}:
    name: Robert Robertowski
    employee_id: hr_pracownik_kgraniczna2
    sign_date: "2014-01-01"
    rozliczac_kwote_wolna: True
-
 Tworze dane etatu - umowa o pracę, wynagrodzenie 11 000.00 PLN
-
 !record {model: hr2.etat.data, id: hr_etat_kgraniczna2_data}:
    name: Jan Janowski
    etat_id: hr_etat_kgraniczna2
    date_from: "2014-01-01"
    month_pay: 11000
    calculate_fp: True
    calculate_fgsp: True
    calculate_emr: True
    calculate_rent: True
    calculate_chor: True
    calculate_wyp: True
-
 Tworzę konfigurację listy płac
-
 !record {model: hr2.payslip.config,id: hr_etat_kgraniczna2_config}:
    name: Tylko etaty
    use_post_only: True
    sequence: 1
-
 == Tworzę listy płac dla miesięcy od stycznia do października ==
-
 Tworzę listę płac  - styczeń
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_styczen}:
    name: Payroll_styczen
    register_month: 1
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-01-28"
-
 Tworzę listę płac  - luty
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_luty}:
    name: Payroll_luty
    register_month: 2
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-02-28"
-
 Tworzę listę płac  - marzec
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_marzec}:
    name: Payroll_marzec
    register_month: 3
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-03-28"
-
 Tworzę listę płac  - kwiecień
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_kwiecien}:
    name: Payroll_kwiecien
    register_month: 4
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-04-28"
-
 Tworzę listę płac  - maj
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_maj}:
    name: Payroll_maj
    register_month: 5
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-05-28"
-
 Tworzę listę płac  - czerwiec
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_czerwiec}:
    name: Payroll_czerwiec
    register_month: 6
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-06-28"
-
 Tworzę listę płac  - lipiec
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_lipiec}:
    name: Payroll_lipiec
    register_month: 7
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-07-28"
-
 Tworzę listę płac  - sierpień
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_sierpien}:
    name: Payroll_sierpien
    register_month: 8
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-08-28"
-
 Tworzę listę płac  - wrzesień
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_wrzesien}:
    name: Payroll_wrzesien
    register_month: 9
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-09-28"
-
 Tworzę listę płac  - październik
-
 !record {model: hr2.payroll.register, id: hr_register_kgraniczna2_pazdziernik}:
    name: Payroll_pazdziernik
    register_month: 10
    register_year: 2014
    config: hr_etat_kgraniczna2_config
    date: "2014-10-28"
-
 == Wyliczam listy płac ==
-
 !python {model: hr2.payroll.register}: |
    from datetime import datetime
    import time
    print "-Styczeń-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_styczen")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_styczen")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_styczen")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_styczen")],context=context)
    print "-Luty-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_luty")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_luty")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_luty")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_luty")],context=context)
    print "-Marzec-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_marzec")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_marzec")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_marzec")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_marzec")],context=context)
    print "-Kwiecień-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_kwiecien")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_kwiecien")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_kwiecien")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_kwiecien")],context=context)
    print "-Maj-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_maj")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_maj")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_maj")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_maj")],context=context)
    print "-Czerwiec-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_czerwiec")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_czerwiec")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_czerwiec")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_czerwiec")],context=context)
    print "-Lipiec-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_lipiec")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_lipiec")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_lipiec")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_lipiec")],context=context)
    print "-Sierpień-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_sierpien")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_sierpien")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_sierpien")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_sierpien")],context=context)
    print "-Wrzesień-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_wrzesien")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_wrzesien")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_wrzesien")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_wrzesien")],context=context)
    print "-Październik-"
    self.compute_additions(cr,uid,[ref("hr_register_kgraniczna2_pazdziernik")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kgraniczna2_pazdziernik")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kgraniczna2_pazdziernik")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kgraniczna2_pazdziernik")],context=context)
-
 == Sprawdzam poprawność wyliczeń z września ==
-
 !python {model: hr2.payslip}: |
    employee_id = ref("hr_pracownik_kgraniczna2")
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id), ('register_id', '=', ref("hr_register_kgraniczna2_wrzesien"))],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.chor_pracownik == 296.45, "Składka chorobowa pracownika powinna wynosić 296.45, a wynosi %s" % payslip_obj.chor_pracownik
    assert (payslip_obj.emr_pracownik + payslip_obj.rent_pracownik) == 1362.46, "Suma składek na ubezpieczenia emerytalne i rentowe pracownika powinna wynosić 1362.46, a wynosi %s" % payslip_obj.emr_pracownik
    assert (payslip_obj.emr_pracodawca + payslip_obj.rent_pracodawca) == 1967.46, "Suma składek na ubezpieczenia emerytalne i rentowe pracodawcy powinna wynosić 1967.46, a wynosi %s" % payslip_obj.emr_pracodawca
    assert payslip_obj.wyp_pracodawca == 233.53, "Składka rentowa pracodawcy powinna wynosić 233.53, a wynosi %s" % payslip_obj.rent_pracodawca
    assert payslip_obj.fp == 296.45, "Fundusz pracy powinien wynosić 296.45, a wynosi %s" % payslip_obj.fp
    assert payslip_obj.fgsp == 12.10, "Fundusz gwarantowanych świadczeń pracownika powinien wynosić 12.10, a wynosi %s" % payslip_obj.fgsp
    assert payslip_obj.skladka_zdrowotna_odliczona == 809.18, "Składka zdrowotna odliczona powinna wynosić 809.18, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert payslip_obj.do_wyplaty == 8497.39, "Wypłata powinna wynosić 8497.39, a wynosi %s" % payslip_obj.do_wyplaty
-
 == Sprawdzam poprawność wyliczeń z października ==
-
 !python {model: hr2.payslip}: |
    employee_id = ref("hr_pracownik_kgraniczna2")
    e = 0.0001
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id), ('register_id', '=', ref("hr_register_kgraniczna2_pazdziernik"))], context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.chor_pracownik == 296.45, "Składka chorobowa pracownika powinna wynosić 296.45, a wynosi %s" % payslip_obj.chor_pracownik
    assert abs((payslip_obj.emr_pracownik + payslip_obj.rent_pracownik) - 391.85) < e, "Suma składek na ubezpieczenia emerytalne i rentowe pracownika powinna wynosić 391.85, a wynosi %s" % (payslip_obj.emr_pracownik + payslip_obj.rent_pracownik)
    assert abs((payslip_obj.emr_pracodawca + payslip_obj.rent_pracodawca) - 565.85) < e, "Suma składek na ubezpieczenia emerytalne i rentowe pracodawcy powinna wynosić 565.85, a wynosi %s" % (payslip_obj.emr_pracodawca + payslip_obj.rent_pracodawca)
    assert payslip_obj.wyp_pracodawca == 233.53, "Składka rentowa pracodawcy powinna wynosić 233.53, a wynosi %s" % payslip_obj.rent_pracodawca
    assert payslip_obj.fp == 296.45, "Fundusz pracy powinien wynosić 296.45, a wynosi %s" % payslip_obj.fp
    assert payslip_obj.fgsp == 12.10, "Fundusz gwarantowanych świadczeń pracownika powinien wynosić 12.10, a wynosi %s" % payslip_obj.fgsp
    assert payslip_obj.skladka_zdrowotna_odliczona == 884.41, "Składka zdrowotna odliczona powinna wynosić 884.41, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert payslip_obj.do_wyplaty == 7699.65, "Wypłata powinna wynosić 7699.65, a wynosi %s" % payslip_obj.do_wyplaty
-
 Usuwam dane etatu
-
 !python {model: hr2.payslip}: |
    self.pool.get('hr2.etat').unlink(cr, uid, ref("hr_etat_kgraniczna2"), context=context)
    self.pool.get('hr2.etat.data').unlink(cr, uid, ref("hr_etat_kgraniczna2_data"), context=context)