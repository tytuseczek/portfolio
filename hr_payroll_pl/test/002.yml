-
 Tworzę listę płac
-
 !record {model: hr2.payroll.register, id: hr_register_contract}:
    name: Payroll2
    register_month: 11
    register_year: 2014
    config: hr_payroll_pl.hr_contract1_config
    date: "2014-12-01"
-
 Wyliczam listę płac
-
 !python {model: hr2.payroll.register}: |
    from datetime import datetime
    import time
    self.compute_additions(cr,uid,[ref("hr_register_contract")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_contract")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_contract")],context=context)
    self.validate_payroll(cr,uid,[ref("hr_register_contract")],context=context)
-
 Sprawdzam poprawność wyliczeń umowy ze składkami
-
 !python {model: hr2.payslip}: |
    employee_id = ref("hr_payroll_pl.hr_pracownik2")
    e = 0.010001
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id), ('register_id','=',ref("hr_register_contract"))],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.chor_pracownik == 490.00, "Składka chorobowa pracownika powinna wynosić 490, a wynosi %s" % payslip_obj.chor_pracownik
    assert payslip_obj.emr_pracownik == 1952.00, "Składka emerytalna pracownika powinna wynosić 1952.00, a wynosi %s" % payslip_obj.emr_pracownik
    assert payslip_obj.rent_pracownik == 300.00, "Składka rentowa pracownika powinna wynosić 300.00, a wynosi %s" % payslip_obj.rent_pracownik
    assert payslip_obj.emr_pracodawca == 1952.00, "Składka emerytalna pracodawcy powinna wynosić 1952.00, a wynosi %s" % payslip_obj.emr_pracodawca
    assert payslip_obj.rent_pracodawca == 1300.00, "Składka rentowa pracodawcy powinna wynosić 1300.00, a wynosi %s" % payslip_obj.rent_pracodawca
    assert payslip_obj.fp == 490.00, "Fundusz pracy powinien wynosić 490.00, a wynosi %s" % payslip_obj.fp
    assert payslip_obj.fgsp == 20.00, "Fundusz gwarantowanych świadczeń pracownika powinien wynosić 20.00, a wynosi %s" % payslip_obj.fgsp
    assert payslip_obj.skladka_zdrowotna_odliczona - 1337.49, "Składka zdrowotna odliczona powinna wynosić 1337.49, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert abs(payslip_obj.skladka_zdrowotna_od_netto - 215.72) <= e, "Składka zdrowotna od netto powinna wynosić 215.72 (+/- 1 grosz), a wynosi %s" % payslip_obj.skladka_zdrowotna_od_netto
    assert payslip_obj.koszty_uzyskania == 3451.60, "Koszty uzyskania powinny wynosić 3451.60, a wynosi %s" % payslip_obj.koszty_uzyskania
    assert payslip_obj.do_wyplaty == 14556.78, "Wypłata powinna wynosić 14556.78, a wynosi %s" % payslip_obj.do_wyplaty
    print "Umowa ze składkami wyliczona prawidłowo."
-
 Sprawdzam poprawność wyliczeń umowy bez składek
-
 !python {model: hr2.payslip}: |
    employee_id = ref("hr_payroll_pl.hr_pracownik3")
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id), ('register_id','=',ref("hr_register_contract"))],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.do_wyplaty == 17120.0, "Wypłata powinna wynosić 17120.0, a wynosi %s" % payslip_obj.do_wyplaty
    assert payslip_obj.chor_pracownik == 0, "Składka chorobowa pracownika powinna wynosić 0, a wynosi %s" % payslip_obj.chor_pracownik
    assert payslip_obj.emr_pracownik == 0, "Składka emerytalna pracownika powinna wynosić 0, a wynosi %s" % payslip_obj.emr_pracownik
    assert payslip_obj.rent_pracownik == 0, "Składka rentowa pracownika powinna wynosić 0, a wynosi %s" % payslip_obj.rent_pracownik
    assert payslip_obj.emr_pracodawca == 0, "Składka emerytalna pracodawcy powinna wynosić 0, a wynosi %s" % payslip_obj.emr_pracodawca
    assert payslip_obj.rent_pracodawca == 0, "Składka rentowa pracodawcy powinna wynosić 0, a wynosi %s" % payslip_obj.rent_pracodawca
    assert payslip_obj.fp == 0, "Fundusz pracy powinien wynosić 0, a wynosi %s" % payslip_obj.fp
    assert payslip_obj.fgsp == 0, "Fundusz gwarantowanych świadczeń pracownika powinien wynosić 0, a wynosi %s" % payslip_obj.fgsp
    assert payslip_obj.skladka_zdrowotna_odliczona == 0, "Składka zdrowotna odliczona powinna wynosić 0, a wynosi %s" % payslip_obj.skladka_zdrowotna_odliczona
    assert payslip_obj.skladka_zdrowotna_od_netto == 0, "Składka zdrowotna od netto powinna wynosić 0, a wynosi %s" % payslip_obj.skladka_zdrowotna_od_netto
    assert payslip_obj.koszty_uzyskania == 4000.00, "Koszty uzyskania powinny wynosić 4000.00, a wynosi %s" % payslip_obj.koszty_uzyskania
    print "Umowa bez składek wyliczona prawidłowo."
