#ftp://fileserver.lacan.com.pl/department/wsparcie/ogolne/specyfikacja/poszczegolne_specyfikacje/Release_KS_2014/Kadry/Ogolne/przypadki_testowe/KUP.ods
#Przypadek KUP standardowe
-
  Tworzę listę płac na styczeń
-
  !record {model: hr2.payroll.register, id: hr_register_styczen_kup1}:
    name: Payroll1
    register_month: 1
    register_year: 2014
    config: hr_payroll_pl.hr_etat_kup1_config
    date: "2014-01-01"
-
  Wyliczam listę płac na styczeń
-
  !python {model: hr2.payroll.register}: |
    from datetime import datetime
    import time
    self.compute_additions(cr,uid,[ref("hr_register_styczen_kup1")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_styczen_kup1")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_styczen_kup1")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_styczen_kup1")],context=context)
-
  Tworzę listę płac na luty
-
  !record {model: hr2.payroll.register, id: hr_register_kup1}:
    name: Payroll1
    register_month: 2
    register_year: 2014
    config: hr_payroll_pl.hr_etat_kup1_config
    date: "2014-02-01"
-
  Wyliczam listę płac na luty
-
  !python {model: hr2.payroll.register}: |
    from datetime import datetime
    import time
    self.compute_additions(cr,uid,[ref("hr_register_kup1")],context=context)
    self.compute_elements(cr,uid,[ref("hr_register_kup1")],context=context)
    self.compute_taxes(cr,uid,[ref("hr_register_kup1")],context=context)
    self.validate_payroll(cr, uid,[ref("hr_register_kup1")],context=context)
-
  Sprawdzam poprawność wyliczeń
-
  !python {model: hr2.payslip}: |
    from lacan_tools.lacan_tools import lacan_round
    employee_id = ref("hr_payroll_pl.hr_pracownik_kup1")
    payslip_id = self.pool.get('hr2.payslip').search(cr,uid,[('employee_id','=',employee_id), ('register_id', '=', ref("hr_register_kup1"))],context=context)[0]
    payslip_obj = self.pool.get('hr2.payslip').browse(cr,uid,payslip_id,context=context)
    assert payslip_obj.koszty_uzyskania == 111.25, "Koszty uzyskania przychodu powinny wynosić 111.25, a wynoszą %s" % payslip_obj.koszty_uzyskania
    dochod = round(payslip_obj.dochod, 0)
    assert dochod == 10330.00, "Podstawa obliczenia zaliczki na podatek dochodowy powinna wynosić 10330.00, a wynosi %s" % payslip_obj.dochod
    assert payslip_obj.kwota_zaliczki_na_PIT == 1813.07, "Zaliczka na podatek dochodowy przed odliczeniem składki zdrowotnej powinna wynosić 1813.07, a wynosi %s" % payslip_obj.kwota_zaliczki_na_PIT
    podatek = payslip_obj.kwota_zaliczki_na_PIT - payslip_obj.skladka_zdrowotna_odliczona
    podatek = round(podatek, 0)
    assert podatek == 1004, "Zaliczka na podatek dochodowy powinna wynosić 1004, a wynosi %s" % podatek
    assert payslip_obj.do_wyplaty == 8557.39, "Wypłata powinna wynosić 8557.39, a wynosi %s" % payslip_obj.do_wyplaty